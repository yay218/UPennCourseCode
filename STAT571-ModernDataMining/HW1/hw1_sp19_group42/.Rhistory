knitr::opts_chunk$set(fig.height=5, fig.width=11, warning = F)
# check if you have ISLR package, if not, install it
if(!require('pacman')) {install.packages('pacman')}
pacman::p_load(ISLR)
# constants for homework assignments
hw_num <- 1
hw_due_date <- "February 3, 2019"
# Generates a vector of size 40 with equally spaced values between 0 and 1, inclusive
x <- seq(0, 1, length = 40)
# Solution 1
set.seed(1)
y = 1 + 1.2*x + rnorm(length(x),2)
myfit <- lm(y~x)
myfit.out <- summary(myfit)
rsquared <- myfit.out$r.squared
plot(x, y, pch=16, ylab="y",
xlab = "x",
main = paste("True lindear model with errors, R squared= ", rsquared))
abline(lm(y~x), col="red", lwd=4)
# Solution 2
library(ggplot2)
set.seed(1)
y =  rnorm(length(x),0,2)
for (i in 1:length(x)){
y[i] <- 1+1.2*x[i]+y[i]
}
df <-data.frame("x" = x,"y" = y)
ggplot(df,aes(x=x,y = y))+geom_point()+ggtitle("True lindear model with errors")
# Solution 1
set.seed(1)
y = 1 + 1.2*x + rnorm(length(x), sd = 2)
myfit <- lm(y~x)
myfit.out <- summary(myfit)
rsquared <- myfit.out$r.squared
plot(x, y, pch=16, ylab="y",
xlab = "x",
main = paste("True lindear model with errors, R squared= ", rsquared))
abline(lm(y~x), col="red", lwd=4)
# Solution 1
set.seed(1)
y = 1 + 1.2*x + rnorm(length(x), 2)
myfit <- lm(y~x)
myfit.out <- summary(myfit)
rsquared <- myfit.out$r.squared
plot(x, y, pch=16, ylab="y",
xlab = "x",
main = paste("True lindear model with errors, R squared= ", rsquared))
abline(lm(y~x), col="red", lwd=4)
knitr::opts_chunk$set(fig.height=5, fig.width=11, warning = F)
# check if you have ISLR package, if not, install it
if(!require('pacman')) {install.packages('pacman')}
pacman::p_load(ISLR)
# constants for homework assignments
hw_num <- 1
hw_due_date <- "February 3, 2019"
# Generates a vector of size 40 with equally spaced values between 0 and 1, inclusive
x <- seq(0, 1, length = 40)
# TODO
set.seed(1)
y <- 1 + 1.2*x + 2*rnorm(length(x))
myfit <- lm(y~x)
myfit.out <- summary(myfit)
rsquared <- myfit.out$r.squared
plot(x, y, pch = 16, ylab = "", xlab = "Q1.1-Linear Model", main = paste("R squared = ", rsquared, sep = ""))
# Solution 1
set.seed(1)
y = 1 + 1.2*x + rnorm(length(x), sd = 2)
myfit <- lm(y~x)
myfit.out <- summary(myfit)
rsquared <- myfit.out$r.squared
plot(x, y, pch=16, ylab="y",
xlab = "x",
main = paste("True lindear model with errors, R squared= ", rsquared))
abline(lm(y~x), col="red", lwd=4)
# i
data_x_y <- data.frame("x" = x,"y" = y)
myfit_0 <- lm(y~x, data=data_x_y)
lm_summary <- summary(myfit_0)$coefficients
beta_0 <- lm_summary[1, 1]
beta_1 <- lm_summary[2, 1]
beta_0
beta_1
# ii
RSS <- sum((myfit_0$res)^2)
RSE <- sqrt(RSS/myfit_0$df)
RSE
# ii
summary(myfit_0)
CI_HIGH <- 0.9064 + 2 * 0.96
CI_LOW <- 0.9064 - 2 * 0.96
CI_LOW
CI_HIGH
# iii
ggplot(df,aes(x=x,y = y)) + geom_point() + geom_smooth(method="lm", se = F,color = "red") +
geom_abline(intercept=1,slope = 1.2 ,color = "blue") +
annotate(geom="text", x=0.5, y=0.5, label="True line",color="blue", vjust = -1) +
annotate(geom="text", x=0.02, y=1.3, label="LS estimates",color="red", vjust = -1)
# i
plot(myfit_0$fitted, myfit_0$residuals, pch  = 16, main = "Q1.3.1 - Residual Plot")
abline(h = 0, lwd = 4, col = "red")
# ii
qqnorm(myfit_0$residuals)
qqline(myfit_0$residuals, lwd=4, col="blue")
# Inializing variables. Note b_1, upper_ci, lower_ci are vectors
x <- seq(0, 1, length = 40)
n_sim <- 100              # number of simulations
b1 <- 0                   # n_sim many LS estimates of beta_1 (=1.2). Initialize to 0 for now
upper_ci <- 0             # upper bound for beta_1. Initialize to 0 for now.
lower_ci <- 0             # lower bound for beta_1. Initialize to 0 for now.
t_star <- qt(0.975, 38)   # Food for thought: why 38 instead of 40? What is t_star?
# Perform the simulation
for (i in 1:n_sim){
y <- 1 + 1.2 * x + rnorm(40, sd = 2)
lse <- lm(y ~ x)
lse_output <- summary(lse)$coefficients
se <- lse_output[2, 2]
b1[i] <- lse_output[2, 1]
upper_ci[i] <- b1[i] + t_star * se
lower_ci[i] <- b1[i] - t_star * se
}
results <- as.data.frame(cbind(se, b1, upper_ci, lower_ci))
# remove unecessary variables from our workspace
# rm(se, b1, upper_ci, lower_ci, x, n_sim, b1, t_star, lse, lse_out)
# i
ggplot(results, aes(x = b1)) + geom_density(aes(y = ..count..), fill = "lightgray") +
geom_vline(aes(xintercept = mean(b1)),linetype = "dashed", size = 0.6,color = "#FC4E07")
mean(b1)
# ii
sum(upper_ci > 1.2 & lower_ci < 1.2)
plot(lower_ci, upper_ci, pch  = 16, main = "Q1.4 - Confidence Interval")
# i
ggplot(results, aes(x = b1)) + geom_density(aes(y = ..count..), fill = "lightgray") +
geom_vline(aes(xintercept = mean(b1)),linetype = "dashed", size = 0.6,color = "#FC4E07")
mean(b1)
# ii
sum(upper_ci > 1.2 & lower_ci < 1.2)
ggplot(results)+geom_linerange(aes(x = seq(1,length(b1),1), ymin=lower_ci, ymax=upper_ci))
# i
ggplot(results, aes(x = b1)) + geom_density(aes(y = ..count..), fill = "lightgray") +
geom_vline(aes(xintercept = mean(b1)),linetype = "dashed", size = 0.6,color = "#FC4E07")
mean(b1)
# ii
sum(upper_ci > 1.2 & lower_ci < 1.2)
ggplot(results)+geom_linerange(aes(x = seq(1,length(b1),1), y = Confidence Interval, ymin=lower_ci, ymax=upper_ci))
# i
ggplot(results, aes(x = b1)) + geom_density(aes(y = ..count..), fill = "lightgray") +
geom_vline(aes(xintercept = mean(b1)),linetype = "dashed", size = 0.6,color = "#FC4E07")
mean(b1)
# ii
sum(upper_ci > 1.2 & lower_ci < 1.2)
ggplot(results)+geom_linerange(aes(x = seq(1,length(b1),1), y = "Confidence Interval", ymin=lower_ci, ymax=upper_ci))
# i
ggplot(results, aes(x = b1)) + geom_density(aes(y = ..count..), fill = "lightgray") +
geom_vline(aes(xintercept = mean(b1)),linetype = "dashed", size = 0.6,color = "#FC4E07")
mean(b1)
# ii
sum(upper_ci > 1.2 & lower_ci < 1.2)
ggplot(results)+geom_linerange(aes(x = seq(1,length(b1),1), "Confidence Interval", ymin=lower_ci, ymax=upper_ci))
# i
ggplot(results, aes(x = b1)) + geom_density(aes(y = ..count..), fill = "lightgray") +
geom_vline(aes(xintercept = mean(b1)),linetype = "dashed", size = 0.6,color = "#FC4E07")
mean(b1)
# ii
sum(upper_ci > 1.2 & lower_ci < 1.2)
ggplot(results)+geom_linerange(aes(x = seq(1,length(b1),1), y = "Confidence Interval", ymin=lower_ci, ymax=upper_ci)) + labs(title = "The Number of Games Won vs. Payroll in 1998", x = "Payroll", y = "The Number of Games Won")
# i
ggplot(results, aes(x = b1)) + geom_density(aes(y = ..count..), fill = "lightgray") +
geom_vline(aes(xintercept = mean(b1)),linetype = "dashed", size = 0.6,color = "#FC4E07")
mean(b1)
# ii
sum(upper_ci > 1.2 & lower_ci < 1.2)
ggplot(results)+geom_linerange(aes(x = seq(1,length(b1),1), ymin=lower_ci, ymax=upper_ci)) + labs(title = "The Number of Games Won vs. Payroll in 1998", x = "Payroll", y = "The Number of Games Won")
# i
ggplot(results, aes(x = b1)) + geom_density(aes(y = ..count..), fill = "lightgray") +
geom_vline(aes(xintercept = mean(b1)),linetype = "dashed", size = 0.6,color = "#FC4E07")
mean(b1)
# ii
sum(upper_ci > 1.2 & lower_ci < 1.2)
ggplot(results)+geom_linerange(aes(x = seq(1,length(b1),1), ymin=lower_ci, ymax=upper_ci)) + labs(title = "Q1.4.2 - Confidence Interval", x = x, y = "The Number of Games Won")
# i
ggplot(results, aes(x = b1)) + geom_density(aes(y = ..count..), fill = "lightgray") +
geom_vline(aes(xintercept = mean(b1)),linetype = "dashed", size = 0.6,color = "#FC4E07")
mean(b1)
# ii
sum(upper_ci > 1.2 & lower_ci < 1.2)
ggplot(results)+geom_linerange(aes(x = seq(1,length(b1),1), ymin=lower_ci, ymax=upper_ci)) + labs(title = "Q1.4.2 - Confidence Interval", x = "x points", y = "The Number of Games Won")
# i
data_x_y <- data.frame("x" = x,"y" = y)
myfit_0 <- lm(y~x, data=data_x_y)
lm_summary <- summary(myfit_0)$coefficients
beta_0 <- lm_summary[1, 1]
beta_1 <- lm_summary[2, 1]
beta_0
beta_1
# ii
RSS <- sum((myfit_0$res)^2)
RSE <- sqrt(RSS/myfit_0$df)
RSE
# ii
summary(myfit_0)
CI_HIGH <- 0.9064 + 2 * 0.96
CI_LOW <- 0.9064 - 2 * 0.96
CI_LOW
CI_HIGH
# iii
library(ggplot2)
ggplot(df,aes(x=x,y = y)) + geom_point() + geom_smooth(method="lm", se = F,color = "red") +
geom_abline(intercept=1,slope = 1.2 ,color = "blue") +
annotate(geom="text", x=0.5, y=0.5, label="True line",color="blue", vjust = -1) +
annotate(geom="text", x=0.02, y=1.3, label="LS estimates",color="red", vjust = -1)
